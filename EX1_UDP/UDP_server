import socket
import threading

# Server configuration
SERVER_IP = socket.gethostbyname(socket.gethostname())
SERVER_PORT = 9999
BUFFER_SIZE = 1024

# Dictionary to maintain client names and addresses
clients = {}

def handle_client(data, client_address):
    global clients
    message = data.decode()

    if client_address not in clients.values():
        # If the client is not known, the message is considered the client's name
        clients[message] = client_address
        print(f"New client added: {message} at {client_address}")
        print("Clients dictionary:")
        for name, address in clients.items():
            print(f"Name: {name}, Address: {address}")

    else:
        for key, value in clients.items():
            if value == client_address:
                name = key
                break


        # If the client is known, process the message as a direct message to another client
        try:
            target_name, message_to_send = message.split(' ', 1)
            if target_name in clients:
                target_address = clients[target_name]
                sock.sendto(f"Message from {name}: {message_to_send}".encode(), target_address)
            else:
                sock.sendto("No such user".encode(), client_address)
        except ValueError:
            sock.sendto("Invalid message format".encode(), client_address)

# Initialize the server socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # Allow the address to be reused

sock.bind((SERVER_IP, SERVER_PORT))
print(f"Server started at {SERVER_IP}:{SERVER_PORT}")


# Listen for incoming messages
while True:
    data, client_address = sock.recvfrom(1024)
    handle_client(data,client_address)
